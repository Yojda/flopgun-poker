import { ProblemStateService } from '../services/problemStateService';
import { prisma } from '../utils/db';

async function testProblemState() {
  const problemStateService = new ProblemStateService();

  try {
    console.log('üß™ Test du syst√®me ProblemState...\n');

    // 1. Cr√©er un utilisateur de test
    console.log('1. Cr√©ation d\'un utilisateur de test...');
    const testUser = await prisma.users.create({
      data: {
        username: 'testuser_problemstate',
        email: 'test_problemstate@example.com',
        password: 'hashedpassword123'
      }
    });
    console.log(`‚úÖ Utilisateur cr√©√© avec l'ID: ${testUser.id}`);

    // 2. R√©cup√©rer un probl√®me existant
    console.log('\n2. R√©cup√©ration d\'un probl√®me existant...');
    const problem = await prisma.problem.findFirst();
    if (!problem) {
      throw new Error('Aucun probl√®me trouv√© dans la base de donn√©es');
    }
    console.log(`‚úÖ Probl√®me trouv√©: ${problem.title} (ID: ${problem.id})`);

    // 3. Tester le d√©marrage d'un probl√®me
    console.log('\n3. Test du d√©marrage d\'un probl√®me...');
    const startedState = await problemStateService.startProblem(testUser.id, problem.id);
    console.log(`‚úÖ Probl√®me d√©marr√© avec l'√©tat: ${startedState.state}`);

    // 4. V√©rifier que l'utilisateur ne peut pas red√©marrer le m√™me probl√®me
    console.log('\n4. Test de la protection contre le red√©marrage...');
    try {
      await problemStateService.startProblem(testUser.id, problem.id);
      console.log('‚ùå Erreur: Le probl√®me aurait d√ª √™tre d√©j√† d√©marr√©');
    } catch (error: any) {
      console.log(`‚úÖ Protection active: ${error.message}`);
    }

    // 5. Tester la soumission d'une r√©ponse correcte
    console.log('\n5. Test de la soumission d\'une r√©ponse correcte...');
    const correctAnswer = await problemStateService.submitAnswer(testUser.id, problem.id, true);
    console.log(`‚úÖ R√©ponse correcte enregistr√©e avec l'√©tat: ${correctAnswer.state}`);

    // 6. V√©rifier que l'utilisateur ne peut pas r√©pondre deux fois
    console.log('\n6. Test de la protection contre les r√©ponses multiples...');
    try {
      await problemStateService.submitAnswer(testUser.id, problem.id, false);
      console.log('‚ùå Erreur: L\'utilisateur aurait d√ª avoir d√©j√† r√©pondu');
    } catch (error: any) {
      console.log(`‚úÖ Protection active: ${error.message}`);
    }

    // 7. Tester les m√©thodes de v√©rification
    console.log('\n7. Test des m√©thodes de v√©rification...');
    const hasAnswered = await problemStateService.hasAnsweredProblem(testUser.id, problem.id);
    console.log(`‚úÖ L'utilisateur a-t-il r√©pondu? ${hasAnswered}`);

    const canAnswer = await problemStateService.canAnswerProblem(testUser.id, problem.id);
    console.log(`‚úÖ L'utilisateur peut-il r√©pondre? ${canAnswer}`);

    // 8. R√©cup√©rer l'√©tat du probl√®me
    console.log('\n8. R√©cup√©ration de l\'√©tat du probl√®me...');
    const problemState = await problemStateService.getProblemState(testUser.id, problem.id);
    console.log(`‚úÖ √âtat du probl√®me: ${JSON.stringify(problemState, null, 2)}`);

    // 9. R√©cup√©rer tous les progr√®s de l'utilisateur
    console.log('\n9. R√©cup√©ration de tous les progr√®s...');
    const userProgress = await problemStateService.getUserProgress(testUser.id);
    console.log(`‚úÖ Progr√®s de l'utilisateur: ${userProgress.length} probl√®me(s)`);

    // 10. Nettoyage
    console.log('\n10. Nettoyage des donn√©es de test...');
    await prisma.problemstate.deleteMany({
      where: { user_id: testUser.id }
    });
    await prisma.users.delete({
      where: { id: testUser.id }
    });
    console.log('‚úÖ Donn√©es de test supprim√©es');

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testProblemState();
}

export { testProblemState }; 